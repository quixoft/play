// Receive packets from cosmic pi
// Julian Lewis 26/Feb/2016 lewis.julian@gmail.com

// To compile:
//    cc -g  pi-server.c -o pi-server

#define _GNU_SOURCE
#include <sys/types.h>
#include <sys/socket.h>

#include <stdarg.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <netdb.h>
#include <sys/time.h>
#include <errno.h>
#include <strings.h>
#include <string.h>
#include <time.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define SinSIZE (sizeof(struct sockaddr_in))

static int ssock     = 0;
static int errors    = 0;

typedef enum {
   HELP,
   PORT,
   DEBUG,
   OPTIONS
 } Options;

char *options[OPTIONS] = {"help","port","debug"};

/* ============================================================= */

int OpenPort(unsigned short port) {

struct sockaddr_in sin;

int s;

   if (!ssock) {

      bzero((void *) &sin, SinSIZE);

      sin.sin_family      = AF_INET;
      sin.sin_port        = htons(port);
      sin.sin_addr.s_addr = htonl(INADDR_ANY);

      s = socket(AF_INET, SOCK_DGRAM, 0);
      if (s < 0) {
	 fprintf(stderr,"OpenPort:Error:Cant open AF_INET sockets\n");
	 perror("OpenPort:errno");
	 return 0;
      }
      ssock = s;

      if (bind(s,(struct sockaddr *) &sin, SinSIZE) < 0) {
	 fprintf(stderr,"OpenPort:Error:Cant bind port:%d\n",port);
	 perror("OpenPort:errno");
	 return 0;
      }
   }
   return ssock;
}

/* ============================================================= */

int RecvFromPort(char *source_ip, unsigned short source_port, char *pkt) {

int cc;
struct sockaddr_in sin;
socklen_t from;

   if (ssock) {

      bzero((void *) &sin, SinSIZE);

      sin.sin_family      = AF_INET;
      sin.sin_port        = htons(source_port);

      from = SinSIZE;

      cc = recvfrom(ssock,
		    (char *) pkt,
		    1024,
		    0,
		    (struct sockaddr *) &sin,
		    &from);
      if (cc < 0) {
	 fprintf(stderr,
		"RecvFromPort:Error:Cant recvfrom port:%d at:%s\n",
		 source_port,
		 source_ip);
	 perror("RecvFromPort:errno");
	 return 0;
      }
      return 1;
   }
   return 0;
}

/* ============================================================= */

int main(int argc,char *argv[]) {
int i, deb;
char source[32], *cp, *ep;
unsigned short port;
char pkt[1024];

   port = 4901;

   for (i=1; i<argc; i++) {

      if (strcmp(argv[i],options[HELP]) == 0) {
	 printf("\nOptions are:\n\n");
	 for (i=0; i<OPTIONS; i++) {
	    printf("%s ",options[i]);
	    switch ((Options) i) {
	       case HELP:
		  printf("[print this help text]\n");
	       break;

	       case PORT:
		  printf("<UDP Port number to be used. Default:%d>\n",4901);
	       break;

	       case DEBUG:
		  printf("<Debug level: 0/None 1/Debug ON. Default:0>\n");
	       break;

	       default:
		  printf("For help type: <prog> help\n");
	    }
	 }
	 printf("\n\n");
	 exit(0);
      }

      else if (strcmp(argv[i],options[PORT]) == 0) {
	 i++;
	 cp = argv[i];
	 if (cp) port = (unsigned short) strtoul(cp,&ep,0);
	 continue;
      }

      else if (strcmp(argv[i],options[DEBUG]) == 0) {
	 i++;
	 cp = argv[i];
	 deb = strtoul(cp,&ep,0);
	 continue;
      }

      else {
	 printf("No such option: %s\n",argv[i]);
	 printf("For help type: timtest %s\n",options[HELP]);
	 exit(1);
      }
   }

   fprintf(stderr,"Sartup Port:%d\n",port);

   if (OpenPort(port))  {

      fprintf(stderr,"Up and running OK\n");

      while (errors < 10) {

	 if (RecvFromPort(source, port, pkt)) {

		for (i=0; i<strlen(pkt); i++) {
			if (pkt[i] == '}') break;
			printf("%c",pkt[i]);
		}
		printf("}\n");

	 } else { sleep(1); errors++; }
      }
   } else errors++;

   close(ssock);

   fprintf(stderr,"ABORTED, after ErrorCount:%d\n",errors);

   exit(1);
}
